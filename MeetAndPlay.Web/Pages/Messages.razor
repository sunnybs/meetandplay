@page "/Messages"
@using Microsoft.AspNetCore.SignalR.Client
@using MeetAndPlay.Core.Infrastructure.Extensions
@using MeetAndPlay.Data.DTO.Chat
@using MeetAndPlay.Data.Models.Chat
@using MeetAndPlay.Data.Models.Users
@using MeetAndPlay.Core.Abstraction.Services
@using CurrieTechnologies.Razor.SweetAlert2
@using MeetAndPlay.Web.Hubs
@attribute [Authorize]

<h2><i class="far fa-comments"></i> Сообщения</h2>

<div class="my-4">
    <NotificationNav/>
</div>

<div class="row my-4">
    <div class="col-md-3 list-group list-group-flush">
        @foreach (var chat in UserChats)
        {
            <button @onclick=@(() => ConnectToChatAsync(chat.Id)) type="button" class="list-group-item list-group-item-action">@ChatNames[chat.Id]</button>
        }
    </div>
    <div @ref="@ChatScreen" class="col-md border rounded p-4" style="height: 640px; overflow: auto;">
        @if (IsChatting)
        {
            foreach (var message in ChatMessages)
            {
                <div class="row d-flex @(CurrentUser.Id == message.Author.Id ? "flex-row-reverse" : "flex-row")" style="overflow-x: hidden">
                    <div class="@(CurrentUser.Id == message.Author.Id ? "sent" : "received") mx-4">
                        <div class="user">@message.Author.UserName</div>
                        <div class="msg">@message.Text</div>
                    </div>
                </div>
            }
        }
        else
        {
            <h2>Выберите чат...</h2>
        }
    </div>
</div>

@if (IsChatting)
{
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col-md">

            <div class="form-group">
                <textarea class="form-control" rows="3" placeholder="Введите сообщение..." @bind="@NewMessage"></textarea>
            </div>
            <div class="form-group">
                <button class="btn btn-warning bg-lightyellow border-0" @onclick="@SendAsync">Отправить</button>
            </div>
        </div>
    </div>
}

@code {

    [Inject]
    IChatService ChatService { get; set; }

    [Inject]
    IUserService UserService { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    [Inject]
    SweetAlertService Swal { get; set; }


    [Inject]
    IJSRuntime JSRuntime { get; set; }

    protected Chat[] UserChats { get; set; } = {};
    protected MessageDto[] ChatMessages { get; set; } = {};

    protected bool IsChatting;
    protected string NewMessage { get; set; }
    protected User CurrentUser { get; set; }

    protected Guid? ActiveChatId { get; set; }

    protected Dictionary<Guid, string> ChatNames { get; set; } = new();
    protected ElementReference ChatScreen;

    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await UserService.GetCurrentUserAsync();
        var hubUrl = NavigationManager.BaseUri.TrimEnd('/') + ChatHub.HubUrl;
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(hubUrl)
            .Build();

        _hubConnection.On<Guid>("UpdateChat", UpdateMessagesAsync);
        await _hubConnection.StartAsync();

        UserChats = await ChatService.GetUserChatsAsync(CurrentUser.Id);
        foreach (var userChat in UserChats)
        {
            ChatNames.Add(userChat.Id, await ChatService.GetChatTitleForCurrentUserAsync(userChat.Id));
        }
    }

    protected async Task ConnectToChatAsync(Guid chatId)
    {
        if (ActiveChatId.HasValue)
        {
            await _hubConnection.InvokeAsync("LeaveChatAsync", ActiveChatId.Value, CurrentUser.UserName);
        }
        ActiveChatId = chatId;
        await _hubConnection.InvokeAsync("EnterChatAsync", chatId, CurrentUser.UserName);
        IsChatting = true;
        ChatMessages = await ChatService.GetMessagesAsync(chatId, CurrentUser.Id);
        StateHasChanged();
    }

    protected async Task UpdateMessagesAsync(Guid chatId)
    {
        ChatMessages = await ChatService.GetMessagesAsync(chatId, CurrentUser.Id);
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("scrollToBottom", ChatScreen);
    }

    protected async Task SendAsync()
    {
        if (!ActiveChatId.HasValue)
        {
            await Swal.FireAsync("Вы не подключены ни к чату");
            return;
        }
        if (NewMessage.IsNullOrWhiteSpace())
        {
            await Swal.FireAsync("Введите текст сообщения");
            return;
        }
        await ChatService.AddMessageToChatAsync(ActiveChatId.Value, NewMessage);
        await _hubConnection.InvokeAsync("UpdateChatAsync", ActiveChatId.Value);
        NewMessage = "";
        StateHasChanged();
    }

}