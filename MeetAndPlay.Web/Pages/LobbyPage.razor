@page "/Lobby/{Id}"
@using MeetAndPlay.Core.Infrastructure.Extensions
@using MeetAndPlay.Core.Infrastructure.Helpers
@using MeetAndPlay.Data.Models.Offers
@using MeetAndPlay.Core.Abstraction.Services
@using MeetAndPlay.Web.Services
@using Microsoft.Extensions.Options
@using MeetAndPlay.Web.Options

<h2>Компании</h2>
<div class="row">
    <div class="m-2 col-md-3 text-center">
        <img class="card-img-top rounded mb-2" style="max-height: 300px; object-fit: cover;" src="@PosterLink" alt="Постер лобби">
        <div class="my-2">
            @if (IsLobbyCreatedByCurrentUser)
                    {
                        <a class="btn btn-warning bg-lightyellow border-0" href="/AddLobby/@Model.Id">Редактировать</a>
                    }
                    else
                    {
                        <button type="button" class="btn btn-warning bg-lightyellow border-0">Постучаться</button>
                    }
        </div>
        
        
        

    </div>
    <div class="m-2 col-md">
        <h3>
            <b>@Title</b>
        </h3>
        <hr>
        @if (Model.LobbyGames != null && Model.LobbyGames.Any())
        {
            <div class="row">
                <div class="col">
                    <b>Игры</b>
                </div>
                <div class="col">
                    @Model.LobbyGames.Select(g => g.Game.Name).JoinAsString(", ")
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <b>Уровень игры</b>
                </div>
                <div class="col">
                    @Model.GameLevel.GetDescription()
                </div>
            </div>
        }
        <div class="row">
            <div class="col">
                <b>Планируемая дата игры</b>
            </div>
            <div class="col">
                @Model.PlannedGameDate.ToString("dd MMMM yyyy")
            </div>
        </div>
        <div class="row">
            <div class="col">
                <b>Необходимое количество игроков</b>
            </div>
            <div class="col">
                @Model.MaxPlayersCount
            </div>
        </div>
        <div class="row">
            <div class="col">
                <b>Текущее количество игроков</b>
            </div>
            <div class="col">
                @Model.CurrentPlayersCount
            </div>
        </div>
        <div class="row">
            <div class="col">
                <b>Тип места</b>
            </div>
            <div class="col">
                @Model.PlaceType.GetDescription()
            </div>
        </div>
    </div>
</div>


@if (!Model.Description.IsNullOrWhiteSpace())
{
    <div>
        <label>
            <b>Пожелания:</b>
        </label>
        <p>@Model.Description</p>
    </div>
}

@code {

    [Parameter]
    public string Id { get; set; }

    [Inject]
    private ILobbyService LobbyService { get; set; }

    [Inject]
    protected IUserAuthenticationService UserAuthenticationService { get; set; }

    [Inject]
    private IApiClient ApiClient { get; set; }

    [Inject]
    private IUserService UserService { get; set; }

    [Inject]
    public IOptions<ApiInfo> ApiInfo { get; set; }

    private Guid ParsedId => Guid.Parse(Id);
    protected Lobby Model { get; set; } = new();
    protected string Title { get; set; }
    protected string PosterLink { get; set; }
    protected bool IsLobbyCreatedByCurrentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await LobbyService.GetLobbyByIdAsync(ParsedId);
        if (UserAuthenticationService.IsAuthenticated())
        {
            var currentUserId = await UserService.GetCurrentUserIdAsync();
            IsLobbyCreatedByCurrentUser = currentUserId == Model.LobbyPlayers.Single(u => u.IsCreator).Player.Id;
        }
        else
        {
            IsLobbyCreatedByCurrentUser = false;
        }

        Title = Model.Title ?? BuildTitle();
        PosterLink = await BuildPosterAsync();
    }

    private string BuildTitle()
    {
        var titleParts = new List<string>();
        titleParts.Add("Поиск компании");
        var games = Model.LobbyGames.Select(lg => lg.Game.Name).JoinAsString(", ");
        if (!games.IsNullOrWhiteSpace())
            titleParts.Add(games);
        var requestedPlayersCount = Model.MaxPlayersCount - Model.CurrentPlayersCount;
        var requestedPlayers = $"нужно еще {requestedPlayersCount} {GetPlayersDeclension(requestedPlayersCount)}";
        titleParts.Add(requestedPlayers);
        return titleParts.JoinAsString(", ");
    }

    private async Task<string> BuildPosterAsync()
    {
        var posterLobbyImage = Model.LobbyImages?
            .FirstOrDefault(i => i.IsCurrentPoster);
        return posterLobbyImage != null
            ? ApiInfo.Value.Address + posterLobbyImage.File.FileLink
            : await ApiClient.GetRandomLobbyPictureLinkAsync();
    }

    private static string GetPlayersDeclension(int count)
    {
        return Commons.GetDeclension(count, "игрок", "игрока", "игроков");
    }

}